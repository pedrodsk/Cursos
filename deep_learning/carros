#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug 15 08:43:52 2021

@author: pedrodsk
"""

import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
import os

os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

base = pd.read_csv('autos.csv', encoding='ISO-8859-1')
base = base.drop(columns=['dateCrawled','dateCreated','nrOfPictures','postalCode',
                          'lastSeen','name','seller','offerType'])

base = base.loc[base.price>100]
base = base.loc[base.price<350000]


valores = {'vehicleType': 'limousine',
           'gearbox': 'manuell',
           'model': 'golf',
           'fuelType': 'benzin',
           'notRepairedDamage': 'nein'
           }
base = base.fillna(value=valores)

#print(base['vehicleType'].value_counts())
#print(base['gearbox'].value_counts())
#print(base['model'].value_counts())
#print(base['fuelType'].value_counts())
#print(base['notRepairedDamage'].value_counts())

previsores = base.iloc[:,1:13].values
preco_real = base['price'].values

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelenconder_previsores = LabelEncoder()
from sklearn.compose import ColumnTransformer


'''
previsores[:,0] = labelenconder_previsores.fit_transform(previsores[:,0])

previsores[:,1] = labelenconder_previsores.fit_transform(previsores[:,1])
previsores[:,3] = labelenconder_previsores.fit_transform(previsores[:,3])
previsores[:,5] = labelenconder_previsores.fit_transform(previsores[:,5])
previsores[:,8] = labelenconder_previsores.fit_transform(previsores[:,8])
previsores[:,9] = labelenconder_previsores.fit_transform(previsores[:,9])
previsores[:,10] = labelenconder_previsores.fit_transform(previsores[:,10])
'''

transformer = ColumnTransformer(
    transformers=[
        ("oii",        # Just a name
         OneHotEncoder(), # The transformer class
         [0,1,3,5,8,9,10]            # The column(s) to be applied on.
         )
    ], remainder='passthrough'
)
previsores = transformer.fit_transform(previsores).toarray()


regressor = Sequential()
regressor.add(Dense(units=158, activation='relu',input_dim = 316))
regressor.add(Dense(units=158, activation='relu'))
regressor.add(Dense(units=1, activation='linear'))
regressor.compile(loss = 'mean_absolute_error',optimizer = 'adam',
                  metrics =['mean_absolute_error'])

#regressor.fit(previsores,preco_real,batch_size=300,epochs=100)

#prever
previsoes = regressor.predict(previsores)
preco_real.mean()
previsoes.mean()